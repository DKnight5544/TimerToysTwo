@page "/"
@page "/{id}"

@using TimerToysTwo.Model
@using TimerToysTwo.Components
@using System.Collections.Generic
@inject HttpClient Http
@inject NavigationManager NavManager



@{


    if (MyTimer == null)
    {
        <h4><em>Still Loading . . .</em></h4>
    }
    else
    {

        @*<div class="banner">Timer Toys</div>*@

        <table class="main-table">
            <tr class="main-table-tr1">
                <td class="main-table-tr1-td1" colspan="2">Timer Toys</td>
            </tr>
            <tr class="main-table-tr2">
                <td class="main-table-left">
                    <Node @ref="MyNode" MyTimer="@MyTimer"></Node>
                </td>
                <td class="main-table-right">
                    <SelectedNode @ref="SelectedNode" OnNameChange="OnNameChange"></SelectedNode>
                    <a href="https://paypal.me/wigiwiz/" target="_blank" class="donate">PLEASE DONATE</a>
                </td>
            </tr>
        </table>    

        if (ticker == null) ticker = new System.Threading.Timer(Tick, null, 1000, 1000);


    }

}


@code {

    [Parameter]
    public string id { get; set; }

    private Timer MyTimer;

    private Node MyNode;
    private SelectedNode SelectedNode;

    private System.Threading.Timer ticker;



    protected override async Task OnInitializedAsync()
    {

        id = "1C84EAD3-0829-474C-9E2A-61930460C371";

        if (string.IsNullOrWhiteSpace(id))
        {
            MyTimer = await Http.GetFromJsonAsync<Timer>("AddRootTimer");
            NavManager.NavigateTo(string.Format("/{0}", MyTimer.TimerKey), forceLoad: true);
        }
        else
        {
            MyTimer = await Http.GetFromJsonAsync<Timer>(string.Format("GetTimer/{0}", id));
            Global.SelectedTimer = MyTimer;
        }

    }

    private void Tick(Object stateInfo)
    {
        MyNode.Tick();
        SelectedNode.Tick();
    }

    private async Task OnNameChange()
    {
        // here we will have to find
        // the treenode that needs to be updated
        // and fire it's StateHasChanged Method.
    }

    private void OnSelect(Timer selectedTimer)
    {
        Global.SelectedTimer = selectedTimer;
        SelectedNode.UpdateDisplay();
    }
}

@page "/"
@page "/{id}"

@using TimerToysTwo.Model
@using TimerToysTwo.Components
@using System.Collections.Generic
@inject HttpClient Http
@inject NavigationManager NavManager



@{

    <div class="banner">Timer Toys</div>

    if (MyTimer == null)
    {
        <div class="loading-message">Loading Timers . . .</div>
    }
    else
    {
        <Node @ref="MyNode" MyTimer="@MyTimer"></Node>
        if (ticker == null) ticker = new System.Threading.Timer(Tick, null, 1000, 1000);
    }

}


@code {

    [Parameter]
    public string id { get; set; }

    private Timer MyTimer;

    private Node MyNode;

    private System.Threading.Timer ticker;



    protected override async Task OnInitializedAsync()
    {

        id = "1C84EAD3-0829-474C-9E2A-61930460C371";

        if (string.IsNullOrWhiteSpace(id))
        {
            MyTimer = await Http.GetFromJsonAsync<Timer>("AddRootTimer");
            NavManager.NavigateTo(string.Format("/{0}", MyTimer.TimerKey), forceLoad: true);
        }
        else
        {
            MyTimer = await Http.GetFromJsonAsync<Timer>(string.Format("GetTimer/{0}", id));
        }

    }

    private void Tick(Object stateInfo)
    {
        MyNode.Tick();
    }
}

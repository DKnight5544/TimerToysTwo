
@using TimerToysTwo.Model
@using System.Collections.Generic
@inject HttpClient Http

<div class="my-timer" @onclick="ToggleExpand">

    @MyTimer.TimerName
    @ElapsedTimeString

    <div style="margin-left:15px;">
        @{

            if (MyChildTimers == null)
            {
            }
            else
            {
                foreach (Timer child in MyChildTimers.OrderBy(c => c.CreationTime))
                {
                    <Node @ref="MyChildNodes[child.TimerKey]" MyTimer="@child"></Node>
                }
            }
        }
    </div>

</div>

@code {

    [Parameter]
    public Timer MyTimer { get; set; }

    private bool IsExpanded { get; set; }

    private Timer[] MyChildTimers;

    private Dictionary<string, Node> MyChildNodes = new Dictionary<string, Node>();

    public string ElapsedTimeString
    {
        get
        {
            //int et = GetElapsedTime();
            return Global.StringifyTime(MyTimer.ElapsedTime);
        }
    }

    private void ToggleExpand()
    {
        IsExpanded = !IsExpanded;
    }



    //public int GetElapsedTime()
    //{
    //    if (MyChildTimers != null)
    //    {
    //        MyTimer.ElapsedTime = 0;
    //        foreach (Timer child in MyChildTimers)
    //        {
    //            bool nodeExists = MyChildNodes.Keys.Contains(child.TimerKey);
    //            if (nodeExists) MyTimer.ElapsedTime += MyChildNodes[child.TimerKey].GetElapsedTime();
    //        }
    //    }

    //    return MyTimer.ElapsedTime;
    //}

    protected override async Task OnInitializedAsync()
    {
        IsExpanded = true;
        if (MyTimer.ChildCount > 0)
        {
            MyChildTimers = await Http.GetFromJsonAsync<Timer[]>(string.Format("GetChildren/{0}", MyTimer.TimerKey));
            StateHasChanged();
        }
    }

    public int Tick()
    {
        int saveTime = MyTimer.ElapsedTime;

        if (MyTimer.IsRunning) MyTimer.ElapsedTime++;

        if (MyChildTimers != null)
        {
            MyTimer.ElapsedTime = 0;
            foreach (Timer child in MyChildTimers.OrderBy(c => c.CreationTime))
            {
                bool nodeExists = MyChildNodes.Keys.Contains(child.TimerKey);
                if (nodeExists) MyTimer.ElapsedTime += MyChildNodes[child.TimerKey].Tick();
            }
        }

        if (MyTimer.ElapsedTime != saveTime) StateHasChanged();

        return MyTimer.ElapsedTime;

    }



}
